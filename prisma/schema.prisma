generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

generator kysely {
  provider = "prisma-kysely"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "Lighty"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum OAuthProvider {
  GOOGLE
  KAKAO
  APPLE
}

enum GatheringType {
  FRIEND
  GROUP
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REPORTED
}

enum GatheringParticipationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum GroupParticipationStatus {
  ACCEPTED
  REPORTED
}

enum NotificationTypes {
  GATHERING_INVITATION_RECEIVED
  GATHERING_INVITATION_ACCEPTED
  GROUP_INVITATION
  FRIEND_REQUEST
  FRIEND_REQUEST_ACCEPTED
  FEED_COMMENT
  FEED_COMMENT_MENTIONED
}

enum ReportTypes {
  FRIEND
  FEED
  GROUP
  FEED_COMMENT
}

model User {
  id                           String        @id @db.Uuid
  email                        String        @db.VarChar(255)
  provider                     OAuthProvider
  name                         String        @db.VarChar(20)
  accountId                    String        @map("account_id") @db.VarChar(15)
  profileImageUrl              String?       @map("profile_image_url")
  termsOfServiceConsent        Boolean       @map("terms_of_service_consent")
  privacyPolicyConsent         Boolean       @map("privacy_policy_consent")
  marketingNotificationConsent Boolean       @default(false) @map("marketing_notification_consent")
  serviceNotificationConsent   Boolean       @default(false) @map("service_notification_consent")
  notificationToken            String?       @map("notification_token")
  createdAt                    DateTime      @map("created_at")
  updatedAt                    DateTime      @map("updated_at")
  deletedAt                    DateTime?     @map("deleted_at")

  gatherings             Gathering[]
  gatheringParticipant   GatheringParticipation[]
  feeds                  Feed[]
  ownedGroups            Group[]
  groupParticipation     GroupParticipation[]
  feedComments           FeedComment[]            @relation("WriterUser")
  mentionedComment       FeedComment[]            @relation("MentionedUser")
  blockedFeeds           BlockedFeed[]
  sentFriendRequest      Friend[]                 @relation("SenderUser")
  receivedFriendRequests Friend[]                 @relation("ReceiverUser")
  friendFeedVisibilities FriendFeedVisibility[]
  notifications          Notification[]
  reports                Report[]
  refreshTokens          RefreshToken[]
  blockedFeedComments    BlockedFeedComment[]
  blockUsers             BlockedUser[]            @relation("BlockerUser")
  blockedUsers           BlockedUser[]            @relation("BlockedUser")

  @@unique([email, deletedAt])
  @@unique([accountId, deletedAt])
  @@map("user")
}

model Admin {
  id       String @id @db.Uuid
  username String @unique
  password String

  @@map("admin")
}

view ActiveUser {
  id                           String        @id @db.Uuid
  email                        String        @unique @db.VarChar(255)
  provider                     OAuthProvider
  name                         String        @db.VarChar(20)
  accountId                    String        @unique @map("account_id") @db.VarChar(15)
  profileImageUrl              String?       @map("profile_image_url")
  termsOfServiceConsent        Boolean       @map("terms_of_service_consent")
  privacyPolicyConsent         Boolean       @map("privacy_policy_consent")
  marketingNotificationConsent Boolean       @default(false) @map("marketing_notification_consent")
  serviceNotificationConsent   Boolean       @default(false) @map("service_notification_consent")
  notificationToken            String?       @map("notification_token")
  createdAt                    DateTime      @map("created_at")
  updatedAt                    DateTime      @map("updated_at")
  deletedAt                    DateTime?     @map("deleted_at")

  @@unique([email, deletedAt])
  @@unique([accountId, deletedAt])
  @@map("active_user")
}

model Gathering {
  id                 String        @id @db.Uuid
  type               GatheringType
  groupId            String?       @map("group_id") @db.Uuid
  hostUserId         String        @map("host_user_id") @db.Uuid
  name               String        @db.VarChar(20)
  description        String        @db.VarChar(40)
  gatheringDate      DateTime      @map("gathering_date")
  address            String        @db.VarChar(100)
  invitationImageUrl String        @map("invitation_image_url")
  endedAt            DateTime?     @map("ended_at")
  createdAt          DateTime      @map("created_at")
  updatedAt          DateTime      @map("updated_at")
  deletedAt          DateTime?     @map("deleted_at")

  group          Group?                   @relation(fields: [groupId], references: [id])
  user           User                     @relation(fields: [hostUserId], references: [id])
  participations GatheringParticipation[]
  feeds          Feed[]

  @@index([hostUserId])
  @@index([groupId])
  @@map("gathering")
}

view ActiveGathering {
  id                 String        @id @db.Uuid
  type               GatheringType
  groupId            String?       @map("group_id") @db.Uuid
  hostUserId         String        @map("host_user_id") @db.Uuid
  name               String        @db.VarChar(20)
  description        String        @db.VarChar(40)
  gatheringDate      DateTime      @map("gathering_date")
  address            String        @db.VarChar(100)
  invitationImageUrl String        @map("invitation_image_url")
  endedAt            DateTime?     @map("ended_at")
  createdAt          DateTime      @map("created_at")
  updatedAt          DateTime      @map("updated_at")
  deletedAt          DateTime?     @map("deleted_at")

  @@map("active_gathering")
}

model GatheringParticipation {
  id            String                       @id @db.Uuid
  gatheringId   String                       @map("gathering_id") @db.Uuid
  participantId String                       @map("participant_id") @db.Uuid
  status        GatheringParticipationStatus @default(PENDING)
  readAt        DateTime?                    @map("read_at")
  createdAt     DateTime                     @map("created_at")
  updatedAt     DateTime                     @map("updated_at")

  gathering   Gathering @relation(fields: [gatheringId], references: [id], onDelete: Cascade)
  participant User      @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@index([gatheringId])
  @@index([participantId])
  @@map("gathering_participation")
}

model Feed {
  id          String    @id @db.Uuid
  writerId    String    @map("writer_id") @db.Uuid
  gatheringId String?   @map("gathering_id") @db.Uuid
  content     String    @db.VarChar(150)
  createdAt   DateTime  @map("created_at")
  updatedAt   DateTime  @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  writer                 User                   @relation(fields: [writerId], references: [id])
  gathering              Gathering?             @relation(fields: [gatheringId], references: [id])
  images                 FeedImage[]
  comments               FeedComment[]
  blockedFeeds           BlockedFeed[]
  friendFeedVisibilities FriendFeedVisibility[]

  @@index([writerId])
  @@index([gatheringId])
  @@map("feed")
}

view ActiveFeed {
  id          String    @id @db.Uuid
  writerId    String    @map("writer_id") @db.Uuid
  gatheringId String?   @map("gathering_id") @db.Uuid
  content     String    @db.VarChar(150)
  createdAt   DateTime  @map("created_at")
  updatedAt   DateTime  @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("active_feed")
}

model FeedImage {
  id        String   @id @db.Uuid
  feedId    String   @map("feed_id") @db.Uuid
  index     Int
  url       String
  createdAt DateTime @map("created_at")

  feed Feed @relation(fields: [feedId], references: [id])

  @@index([feedId])
  @@map("feed_image")
}

model FeedComment {
  id              String    @id @db.Uuid
  feedId          String    @map("feed_id") @db.Uuid
  writerId        String    @map("writer_id") @db.Uuid
  content         String
  mentionedUserId String?   @map("mentioned_user_id") @db.Uuid
  createdAt       DateTime  @map("created_at")
  deletedAt       DateTime? @map("deleted_at")

  feed          Feed                 @relation(fields: [feedId], references: [id])
  writer        User                 @relation(name: "WriterUser", fields: [writerId], references: [id])
  mentionedUser User?                @relation(name: "MentionedUser", fields: [mentionedUserId], references: [id])
  blocked       BlockedFeedComment[]

  @@index([feedId])
  @@index([writerId])
  @@index([mentionedUserId])
  @@map("feed_comment")
}

view ActiveFeedComment {
  id        String    @id @db.Uuid
  feedId    String    @map("feed_id") @db.Uuid
  writerId  String    @map("writer_id") @db.Uuid
  content   String
  createdAt DateTime  @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("active_feed_comment")
}

model FriendFeedVisibility {
  feedId    String   @map("feed_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime

  feed Feed @relation(fields: [feedId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([feedId, userId])
  @@index([userId])
  @@map("friend_feed_visibility")
}

model BlockedFeed {
  userId    String   @map("user_id") @db.Uuid
  feedId    String   @map("feed_id") @db.Uuid
  createdAt DateTime @map("created_at")

  user User @relation(fields: [userId], references: [id])
  feed Feed @relation(fields: [feedId], references: [id])

  @@id([userId, feedId])
  @@index([feedId])
  @@map("blocked_feed")
}

model Friend {
  id         String       @id @db.Uuid
  senderId   String       @map("sender_id") @db.Uuid
  receiverId String       @map("receiver_id") @db.Uuid
  status     FriendStatus @default(PENDING)
  createdAt  DateTime     @map("created_at")
  updatedAt  DateTime     @map("updated_at")

  sender   User @relation(name: "SenderUser", fields: [senderId], references: [id])
  receiver User @relation(name: "ReceiverUser", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
  @@index([receiverId])
  @@map("friend")
}

model Group {
  id             String   @id @db.Uuid
  name           String   @db.VarChar(20)
  description    String   @db.VarChar(40)
  groupImageUrl  String   @map("group_image_url")
  gatheringCount Int      @default(0) @map("gathering_count")
  ownerId        String   @map("owner_id") @db.Uuid
  createdAt      DateTime @map("created_at")
  updatedAt      DateTime @map("updated_at")

  owner              User                 @relation(fields: [ownerId], references: [id])
  groupParticipation GroupParticipation[]
  gatherings         Gathering[]

  @@index([ownerId])
  @@map("group")
}

model GroupParticipation {
  id            String                   @id @db.Uuid
  groupId       String                   @map("group_id") @db.Uuid
  participantId String                   @map("participant_id") @db.Uuid
  status        GroupParticipationStatus @default(ACCEPTED)
  createdAt     DateTime                 @map("created_at")

  group       Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  participant User  @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([groupId, participantId])
  @@index([participantId])
  @@map("group_participation")
}

model Notification {
  id        String            @id @db.Uuid
  userId    String            @map("user_id") @db.Uuid
  type      NotificationTypes
  title     String            @db.VarChar(20)
  message   String            @db.VarChar(100)
  relatedId String?           @map("related_id")
  createdAt DateTime          @map("created_at")
  readAt    DateTime?         @map("read_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("notification")
}

model Report {
  id         String      @id @db.Uuid
  reporterId String      @map("reporter_id") @db.Uuid
  reportedId String      @map("reported_id") @db.Uuid
  type       ReportTypes
  reason     String
  createdAt  DateTime    @map("created_at")
  updatedAt  DateTime    @map("updated_at")

  reporter User @relation(fields: [reporterId], references: [id])

  @@index([reporterId])
  @@map("report")
}

model RefreshToken {
  userId    String   @map("user_id") @db.Uuid
  deviceId  String   @map("device_id")
  token     String
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@id([userId, deviceId])
  @@map("refresh_token")
}

model BlockedFeedComment {
  userId    String   @map("user_id") @db.Uuid
  commentId String   @map("comment_id") @db.Uuid
  createdAt DateTime @map("created_at")

  user    User        @relation(fields: [userId], references: [id])
  comment FeedComment @relation(fields: [commentId], references: [id])

  @@id([userId, commentId])
  @@index([commentId])
  @@map("blocked_feed_comment")
}

model BlockedUser {
  blockerId String   @map("blocker_id") @db.Uuid
  blockedId String   @map("blocked_id") @db.Uuid
  createdAt DateTime @map("created_at")

  user    User @relation(fields: [blockerId], references: [id], name: "BlockerUser")
  blocked User @relation(fields: [blockedId], references: [id], name: "BlockedUser")

  @@id([blockerId, blockedId])
  @@index([blockedId])
  @@map("blocked_user")
}
