generator client {
  provider = "prisma-client-js"
  previewFeatures = ["views"]
}

generator kysely {
  provider = "prisma-kysely"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "Lighty"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum OAuthProvider {
  GOOGLE
  KAKAO
  APPLE
}

enum GatheringType {
  FRIEND
  GROUP
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REPORTED
}

enum GatheringParticipationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum GroupParticipationStatus {
  ACCEPTED
  REPORTED
}

enum NotificationTypes {
  GATHERING_INVITATION_RECEIVED
  GATHERING_INVITATION_ACCEPTED
  GROUP_INVITATION
  FRIEND_REQUEST
  FRIEND_REQUEST_ACCEPTED
  FEED_COMMENT
}

enum ReportTypes {
  FRIEND
  FEED
  GROUP
  FEED_COMMENT
}

model User {
  id String @id @db.Uuid
  email String @db.VarChar(255)
  provider OAuthProvider
  name String @db.VarChar(20)
  accountId String @db.VarChar(15) @map("account_id")
  profileImageUrl String? @map("profile_image_url")
  termsOfServiceConsent Boolean @map("terms_of_service_consent")
  privacyPolicyConsent Boolean @map("privacy_policy_consent")
  marketingNotificationConsent Boolean @map("marketing_notification_consent") @default(false)
  serviceNotificationConsent Boolean @map("service_notification_consent") @default(false)
  notificationToken String? @map("notification_token")
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")
  deletedAt DateTime? @map("deleted_at")


  gatherings Gathering[]
  gatheringParticipant GatheringParticipation[]
  feeds Feed[]
  ownedGroups Group[]
  groupParticipation GroupParticipation[]
  feedComments FeedComment[]
  blockedFeeds BlockedFeed[]
  sentFriendRequest Friend[] @relation("SenderUser")
  receivedFriendRequests Friend[] @relation("ReceiverUser")
  friendFeedVisibilities FriendFeedVisibility[]
  notifications Notification[]
  reports Report[]


  @@unique([email, deletedAt])
  @@unique([accountId, deletedAt])
  @@map("user")
}

view ActiveUser {
  id String @id @db.Uuid
  email String @db.VarChar(255) @unique
  provider OAuthProvider
  name String @db.VarChar(20)
  accountId String @db.VarChar(15) @map("account_id") @unique
  profileImageUrl String? @map("profile_image_url")
  termsOfServiceConsent Boolean @map("terms_of_service_consent")
  privacyPolicyConsent Boolean @map("privacy_policy_consent")
  marketingNotificationConsent Boolean @map("marketing_notification_consent") @default(false)
  serviceNotificationConsent Boolean @map("service_notification_consent") @default(false)
  notificationToken String? @map("notification_token")
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@unique([email, deletedAt])
  @@unique([accountId, deletedAt])
  @@map("active_user")
}

model Gathering {
  id String @id @db.Uuid
  type GatheringType
  groupId String? @db.Uuid @map("group_id")
  hostUserId String @db.Uuid @map("host_user_id")
  name String @db.VarChar(20)
  description String @db.VarChar(40)
  gatheringDate DateTime @map("gathering_date")
  address String @db.VarChar(100)
  invitationImageUrl String @map("invitation_image_url")
  endedAt DateTime? @map("ended_at")
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  group Group? @relation(fields: [groupId], references: [id])
  user User @relation(fields: [hostUserId], references: [id])
  participations GatheringParticipation[]
  feeds Feed[]

  @@index([hostUserId])
  @@index([groupId])
  @@map("gathering")
}

view ActiveGathering {
  id String @id @db.Uuid
  type GatheringType
  groupId String? @db.Uuid @map("group_id")
  hostUserId String @db.Uuid @map("host_user_id")
  name String @db.VarChar(20)
  description String @db.VarChar(40)
  gatheringDate DateTime @map("gathering_date")
  address String @db.VarChar(100)
  invitationImageUrl String @map("invitation_image_url")
  endedAt DateTime? @map("ended_at")
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("active_gathering")
}

model GatheringParticipation {
  id String @id @db.Uuid
  gatheringId String @db.Uuid @map("gathering_id")
  participantId String @db.Uuid @map("participant_id")
  status GatheringParticipationStatus @default(PENDING)
  readAt DateTime? @map("read_at")
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")

  gathering Gathering @relation(fields: [gatheringId], references: [id], onDelete: Cascade)
  participant User @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@index([gatheringId])
  @@index([participantId])
  @@map("gathering_participation")
}

model Feed {
  id String @id @db.Uuid
  writerId String @db.Uuid @map("writer_id")
  gatheringId String? @db.Uuid @map("gathering_id")
  content String @db.VarChar(150)
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  writer User @relation(fields: [writerId], references: [id])
  gathering Gathering? @relation(fields: [gatheringId], references: [id])
  images FeedImage[]
  comments FeedComment[]
  blockedFeeds BlockedFeed[]
  friendFeedVisibilities FriendFeedVisibility[]

  @@index([writerId])
  @@index([gatheringId])
  @@map("feed")
}

view ActiveFeed {
  id String @id @db.Uuid
  writerId String @db.Uuid @map("writer_id")
  gatheringId String? @db.Uuid @map("gathering_id")
  content String @db.VarChar(150)
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("active_feed")
}

model FeedImage {
  id String @id @db.Uuid
  feedId String @db.Uuid @map("feed_id")
  index Int
  url String
  createdAt DateTime @map("created_at")

  feed Feed @relation(fields: [feedId], references: [id])

  @@index([feedId])
  @@map("feed_image")
}

model FeedComment {
  id String @id @db.Uuid
  feedId String @db.Uuid @map("feed_id")
  writerId String @db.Uuid @map("writer_id")
  content String
  createdAt DateTime @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  feed Feed @relation(fields: [feedId], references: [id])
  writer User @relation(fields: [writerId], references: [id])

  @@index([feedId])
  @@index([writerId])
  @@map("feed_comment")
}

view ActiveFeedComment {
  id String @id @db.Uuid
  feedId String @db.Uuid @map("feed_id")
  writerId String @db.Uuid @map("writer_id")
  content String
  createdAt DateTime @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("active_feed_comment")
}

model FriendFeedVisibility {
  feedId String @db.Uuid @map("feed_id")
  userId String @db.Uuid @map("user_id")
  createdAt DateTime
  
  feed Feed @relation(fields: [feedId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@id([feedId, userId])
  @@map("friend_feed_visibility")
}

model BlockedFeed {
  userId    String @db.Uuid @map("user_id")
  feedId    String @db.Uuid @map("feed_id")
  createdAt DateTime @map("created_at")

  user User @relation(fields: [userId], references: [id])
  feed Feed @relation(fields: [feedId], references: [id])

  @@index([feedId])
  @@unique([userId, feedId])
  @@map("blocked_feed")
}

model Friend {
  id String @id @db.Uuid
  senderId String @db.Uuid @map("sender_id")
  receiverId String @db.Uuid @map("receiver_id")
  status FriendStatus @default(PENDING)
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")

  sender User @relation(name: "SenderUser", fields: [senderId], references: [id])
  receiver User @relation(name: "ReceiverUser", fields: [receiverId], references: [id])

  @@index([receiverId])
  @@unique([senderId, receiverId])
  @@map("friend")
}

model Group {
  id String @id @db.Uuid
  name String @db.VarChar(20)
  description String @db.VarChar(40)
  groupImageUrl String @map("group_image_url")
  gatheringCount Int @default(0) @map("gathering_count")
  ownerId String @db.Uuid @map("owner_id")
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")

  owner User @relation(fields: [ownerId], references: [id])
  groupParticipation GroupParticipation[]
  gatherings Gathering[]

  @@index([ownerId])
  @@map("group")
}

model GroupParticipation {
  id String @id @db.Uuid
  groupId String @db.Uuid @map("group_id")
  participantId String @db.Uuid @map("participant_id")
  status GroupParticipationStatus @default(ACCEPTED)
  createdAt DateTime @map("created_at")

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  participant User @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@index([participantId])
  @@unique([groupId, participantId])
  @@map("group_participation")
}

model Notification {
  id String @id @db.Uuid
  userId String @db.Uuid @map("user_id")
  type NotificationTypes
  title String @db.VarChar(20)
  message String @db.VarChar(100)
  relatedId String? @map("related_id")
  createdAt DateTime @map("created_at")
  readAt DateTime? @map("read_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("notification")
}

model Report {
  id String @id @db.Uuid
  reporterId String @db.Uuid @map("reporter_id")
  reportedId String @db.Uuid  @map("reported_id")
  type ReportTypes
  reason String
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")

  reporter User @relation(fields: [reporterId], references: [id])

  @@index([reporterId])
  @@map("report")
}