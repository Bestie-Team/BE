generator client {
  provider = "prisma-client-js"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./ERD.md"
  title    = "Lighty"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OAuthProvider {
  GOOGLE
  KAKAO
  APPLE
}

enum FriendStatus {
  PENDING
  ACCEPTED
}

model User {
  id String @id
  email String @db.VarChar(255) @unique
  provider OAuthProvider
  name String @db.VarChar(10)
  serviceId String @db.VarChar(15) @map("service_id") @unique
  profileImageUrl String @map("avatar_url")
  createdAt DateTime @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  gatherings Gathering[]
  receivedInvitations GatheringInvitation[] @relation("InviterUser")
  sentInvitations GatheringInvitation[] @relation("InviteeUser")
  gatheringParticipant GatheringParticipation[]
  feeds Feed[]
  friendSender Friend[] @relation("SenderUser")
  friendReceiver Friend[] @relation("ReceiverUser")
  ownedGroups Group[]
  groupParticipation GroupParticipation[]
  feedComments FeedComment[]
  blockedFeeds BlockedFeed[]

  @@unique([email, deletedAt])
  @@unique([serviceId, deletedAt])
  @@map("user")
}

model Gathering {
  id String @id
  hostUserId String @map("host_user_id")
  name String @db.VarChar(20)
  description String @db.VarChar(40)
  gatheringDate DateTime @map("gathering_date")
  address String @db.VarChar(100)
  invitationImageUrl String @map("invitation_image_url")
  isDone Boolean @map("is_done")
  createdAt DateTime @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [hostUserId], references: [id])
  invitations GatheringInvitation[]
  participation GatheringParticipation[]

  @@map("gathering")
}
model GatheringInvitation {
  id String @id
  gatheringId String @map("gathering_id")
  inviterId String @map("inviter_id")
  inviteeId String @map("invitee_id")
  createdAt DateTime @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  gathering Gathering @relation(fields: [gatheringId], references: [id])
  inviter User @relation(name: "InviterUser", fields: [inviterId], references: [id])
  invitee User @relation(name: "InviteeUser", fields: [inviteeId], references: [id])

  @@map("gathering_invitation")
}

model GatheringParticipation {
  id String @id
  gatheringId String @map("gathering_id")
  participantId String @map("participant_id")
  createdAt DateTime @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  gathering Gathering @relation(fields: [gatheringId], references: [id])
  participant User @relation(fields: [participantId], references: [id])

  @@map("gathering_participation")
}

model Feed {
  id String @id
  writerId String @map("writer_id")
  content String @db.VarChar(150)
  createdAt DateTime @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  writer User @relation(fields: [writerId], references: [id])
  images FeedImage[]
  comments FeedComment[]
  blockedFeeds BlockedFeed[]

  @@map("feed")
}

model FeedImage {
  id String @id
  feedId String @map("feed_id")
  url String
  createdAt DateTime @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  feed Feed @relation(fields: [feedId], references: [id])

  @@map("feed_image")
}

model FeedComment {
  id String @id
  feedId String @map("feed_id")
  writerId String @map("writer_id")
  content String
  createdAt DateTime @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  feed Feed @relation(fields: [feedId], references: [id])
  writer User @relation(fields: [writerId], references: [id])

  @@map("feed_comment")
}

model BlockedFeed {
  userId    String
  feedId    String
  createdAt DateTime @map("created_at")

  user User @relation(fields: [userId], references: [id])
  feed Feed @relation(fields: [feedId], references: [id])

  @@unique([userId, feedId])
  @@map("blocked_feed")
}

model Friend {
  id String @id
  senderId String
  receiverId String
  status FriendStatus
  createdAt DateTime @map("created_at")

  sender User @relation(name: "SenderUser", fields: [senderId], references: [id])
  receiver User @relation(name: "ReceiverUser", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
  @@map("friend")
}

model Group {
  id String @id
  name String @db.VarChar(20)
  description String @db.VarChar(40)
  groupImageUrl String @map("group_image_url")
  ownerId String @map("owner_id")
  createdAt DateTime @map("created_at")

  owner User @relation(fields: [ownerId], references: [id])
  groupParticipation GroupParticipation[]

  @@map("group")
}

model GroupParticipation {
  id String @id
  groupId String @map("group_id")
  participantId String @map("participant_id")
  createdAt DateTime @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  group Group @relation(fields: [groupId], references: [id])
  participant User @relation(fields: [participantId], references: [id])

  @@unique([groupId, participantId])
  @@map("group_participation")
}